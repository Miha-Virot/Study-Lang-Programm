'''
Цикл while (“пока”) позволяет выполнить одну и ту же последовательность действий,
пока проверяемое условие истинно. Условие записывается до тела цикла и проверяется до выполнения тела цикла.
Как правило, цикл while используется, когда невозможно определить точное значение количества проходов исполнения цикла.

while в простейшем случае выглядит так:
    while условие:
        блок инструкций

При выполнении цикла while сначала проверяется условие. Если оно ложно, то выполнение цикла прекращается и управление
передается на следующую инструкцию после тела цикла while. Если условие истинно, то выполняется инструкция,
после чего условие проверяется снова и снова выполняется инструкция. Так продолжается до тех пор,
пока условие будет истинно. Как только условие станет ложно, работа цикла завершится и управление передастся
следующей инструкции после цикла.
'''

#Например, следующий фрагмент программы напечатает на экран квадраты всех целых чисел от 1 до 10.
# Видно, что цикл while может заменять цикл for ... in range(...):
i = 1
while i <= 10:
    print(i ** 2)
    i += 1

n = int(input())
length = 0
while n > 0:
    n //= 10  # это эквивалентно n = n // 10
    length += 1
print(length)

#После тела цикла можно написать слово else: и после него блок операций,
# который будет выполнен один раз после окончания цикла, когда проверяемое условие станет неверно:
i = 1
while i <= 10:
    print(i)
    i += 1
else:
    print('Цикл окончен, i =', i)
'''
Казалось бы, никакого смысла в этом нет, ведь эту же инструкцию можно просто написать после окончания цикла. 
Смысл появляется только вместе с инструкцией break. Если во время выполнения Питон встречает инструкцию break 
внутри цикла, то он сразу же прекращает выполнение этого цикла и выходит из него. При этом ветка else исполняться 
не будет. Разумеется, инструкцию break осмыленно вызывать только внутри инструкции if, то есть она должна 
выполняться только при выполнении какого-то особенного условия.

Приведем пример программы, которая считывает числа до тех пор, пока не встретит отрицательное число. 
При появлении отрицательного числа программа завершается. В первом варианте последовательность чисел завершается 
числом 0 (при считывании которого надо остановиться).

Другая инструкция управления циклом — continue (продолжение цикла). Если эта инструкция 
встречается где-то посередине цикла, то пропускаются все оставшиеся инструкции до конца цикла, 
и исполнение цикла продолжается со следующей итерации.
'''
a = int(input())
while a != 0:
    if a < 0:
        print('Встретилось отрицательное число', a)
        break
    a = int(input())
else:
    print('Ни одного отрицательного числа не встретилось')

n = int(input())
for i in range(n):
    a = int(input())
    if a < 0:
        print('Встретилось отрицательное число', a)
        break
else:
    print('Ни одного отрицательного числа не встретилось')

